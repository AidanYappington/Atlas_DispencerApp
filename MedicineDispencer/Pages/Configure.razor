@page "/Configure"
@using MedicineDispencer.Data
@inject PillDispenserContext Db
@inject IJSRuntime JSRuntime
@using Microsoft.EntityFrameworkCore

<div class="container">
    <div class="card mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">💊 Compartiment Configuratie</h3>
            <button class="btn btn-danger" @onclick="ResetAllCompartments" disabled="@isResetting">
                @if (isResetting)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                }
                else
                {
                    <text>♻️ Reset Alle Compartimenten</text>
                }
            </button>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label">Kies compartiment:</label>
                <select class="form-select" @bind="selectedCompartmentNumber" @bind:event="onchange">
                    <option disabled value="">-- Selecteer een compartiment --</option>
                    @for (int i = 1; i <= 4; i++)
                    {
                        <option value="@i">Compartiment @i</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label">Kies medicijn:</label>
                <select class="form-select" @bind="selectedMedicationId">
                    <option disabled value="">-- Selecteer een medicijn --</option>
                    @foreach (var med in medications)
                    {
                        <option value="@med.Id">@med.Name (@med.Dosage)</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label">Doseringsinterval (in seconden):</label>
                <input type="number" class="form-control" @bind="dosingInterval" min="1" />
            </div>

            <button type="button" class="btn btn-primary mt-3" @onclick="SaveCompartmentConfig" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                }
                else
                {
                    <text>💾 Opslaan</text>
                }
            </button>

            @if (!string.IsNullOrWhiteSpace(statusMessage))
            {
                <div class="alert alert-@statusType mt-3">@statusMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private int selectedMedicationId;
    private int dosingInterval = 30;
    private List<MedicationStock> medications = new();

    private string statusMessage = string.Empty;
    private string statusType = "success";
    private bool isSaving = false;
    private bool isResetting = false;

    private int _selectedCompartmentNumber;
    private int selectedCompartmentNumber
    {
        get => _selectedCompartmentNumber;
        set
        {
            _selectedCompartmentNumber = value;
            _ = OnCompartmentSelected(value); // async fire-and-forget
        }
    }

    protected override async Task OnInitializedAsync()
    {
        medications = await Db.Medications.ToListAsync();
    }

    private async Task OnCompartmentSelected(int compartmentNumber)
    {
        var existing = await Db.Compartments
            .Include(c => c.Medication)
            .Include(c => c.DosingTimes)
            .FirstOrDefaultAsync(c => c.CompartmentNumber == compartmentNumber);

        if (existing != null)
        {
            selectedMedicationId = existing.MedicationId ?? 0;
            dosingInterval = existing.DosingTimes.FirstOrDefault()?.IntervalSeconds ?? 30;
        }
        else
        {
            selectedMedicationId = 0;
            dosingInterval = 30;
        }

        StateHasChanged();
    }

    private async Task SaveCompartmentConfig()
    {
        isSaving = true;
        statusMessage = string.Empty;
        statusType = "success";

        try
        {
            if (selectedCompartmentNumber < 1 || selectedMedicationId == 0 || dosingInterval <= 0)
            {
                statusMessage = "⚠️ Vul alle velden in en geef een geldige doseringstijd op.";
                statusType = "warning";
                return;
            }

            var medication = await Db.Medications.FirstOrDefaultAsync(m => m.Id == selectedMedicationId);
            if (medication == null)
            {
                statusMessage = "❌ Geselecteerd medicijn niet gevonden.";
                statusType = "danger";
                return;
            }

            var existingCompartment = await Db.Compartments
                .Include(c => c.DosingTimes)
                .FirstOrDefaultAsync(c => c.CompartmentNumber == selectedCompartmentNumber);

            if (existingCompartment != null)
            {
                existingCompartment.MedicationId = selectedMedicationId;
                existingCompartment.Stock = medication.Stock;

                Db.DosingTimes.RemoveRange(existingCompartment.DosingTimes);

                existingCompartment.DosingTimes = new List<DosingTime>
                {
                    new DosingTime { IntervalSeconds = dosingInterval }
                };
            }
            else
            {
                var newCompartment = new Compartment
                {
                    CompartmentNumber = selectedCompartmentNumber,
                    MedicationId = selectedMedicationId,
                    Stock = medication.Stock,
                    DosingTimes = new List<DosingTime>
                    {
                        new DosingTime { IntervalSeconds = dosingInterval }
                    }
                };
                await Db.Compartments.AddAsync(newCompartment);
            }

            await Db.SaveChangesAsync();
            statusMessage = $"✅ Compartiment {selectedCompartmentNumber} succesvol geconfigureerd.";

            selectedCompartmentNumber = 0;
            selectedMedicationId = 0;
            dosingInterval = 30;
        }
        catch (Exception ex)
        {
            statusMessage = $"❌ Fout bij opslaan: {ex.Message}";
            statusType = "danger";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ResetAllCompartments()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "Weet u zeker dat u ALLE compartimenten wilt resetten?\nDeze actie kan niet ongedaan worden gemaakt!");

        if (!confirmed) return;

        isResetting = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            await Db.DosingTimes.ExecuteDeleteAsync();
            await Db.Compartments.ExecuteDeleteAsync();
            await Db.Database.ExecuteSqlRawAsync("DELETE FROM sqlite_sequence WHERE name='Compartments';");

            statusMessage = "✅ Alle compartimenten zijn succesvol gereset!";
            statusType = "success";

            selectedCompartmentNumber = 0;
            selectedMedicationId = 0;
            dosingInterval = 30;
        }
        catch (Exception ex)
        {
            statusMessage = $"❌ Fout bij resetten: {ex.Message}";
            statusType = "danger";
        }
        finally
        {
            isResetting = false;
            StateHasChanged();
        }
    }
}
